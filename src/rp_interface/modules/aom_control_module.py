from typing import Union

from rp_interface.red_pitaya_module import RedPitayaModule
from rp_interface.red_pitaya import RedPitaya
from rp_interface.red_pitaya_control import RedPitayaControl
from rp_interface.red_pitaya_register import MuxedRegister
from rp_interface.utils import DataType


class AOMControlModule(RedPitayaModule):
    '''
    Implements an interface to an aom control module

    An aom control module is composed of:
        - An input select (0 or 1, designating the input channel of the red pitaya)
        - A trap enable input (output DC will be 1V if enabled, 0V if disabled)
        - Trap DC toggle timings for fast toggling of aom, composed of:
            Delay time, Toggle time (8ns resolution, up to 0.5368709 seconds)
        - A feedback enable input (Feedback will be subtracted from trap output if on)
        - Feedback toggle timings for fast toggling of feedback signal, composed of:
            Delay time, Toggle time (8ns resolution, up to 0.5368709 seconds)
        - Feedback gain (in range -0.5 to 0.5)

    The feedback signal is generated by squaring the selected input signal
    '''
    def __init__(self,
                 red_pitaya: Union[RedPitaya, str],
                 gpio_write_address: str,
                 gpio_read_address: str,
                 apply_defaults: bool = False
                 ):
        super().__init__(red_pitaya=red_pitaya, apply_defaults=False)

        self.default_values = {
                'feedback_gain': 0.01,
                'trap_enable': False,
                'feedback_enable': False
            }

        self._gpio_write_address = gpio_write_address
        self._gpio_read_address = gpio_read_address

        self.fs = 125e6

        self._define_register_locations()
        self._define_controls()

        self.property_definitions = {
            'input_select': ('_input_select_control', 'value'),
            'trap_enable': ('_trap_enable_control', 'value'),
            'trap_toggle_delay': ('_trap_toggle_delay_control', 'value'),
            'trap_toggle_time': ('_trap_toggle_time_control', 'value'),
            'feedback_enable': ('_feedback_enable_control', 'value'),
            'feedback_toggle_delay': ('_feedback_toggle_delay_control', 'value'),
            'feedback_toggle_time': ('_feedback_toggle_time_control', 'value'),
            'feedback_gain': ('_feedback_gain_control', 'value'),
        }
        self._define_properties()

        if apply_defaults:
            self.apply_defaults()

    def _define_register_locations(self):
        '''
        A method that defines all register addresses of an AOM block
        Called in __init__, but separated out for readability
        '''
        # =======================================
        # ====== DEFINE REGISTER LOCATIONS ======
        # =======================================
        self._input_select_register = MuxedRegister(
            gpio_write_address=self._gpio_write_address,
            gpio_read_address=self._gpio_read_address,
            register_address=1,
            n_bits=1,
            is_shared=False
        )

        self._trap_enable_register = MuxedRegister(
            gpio_write_address=self._gpio_write_address,
            gpio_read_address=self._gpio_read_address,
            register_address=2,
            n_bits=1,
            is_shared=False
        )

        self._trap_toggle_delay_register = MuxedRegister(
            gpio_write_address=self._gpio_write_address,
            gpio_read_address=self._gpio_read_address,
            register_address=3,
            n_bits=26,
            is_shared=False
        )

        self._trap_toggle_time_register = MuxedRegister(
            gpio_write_address=self._gpio_write_address,
            gpio_read_address=self._gpio_read_address,
            register_address=4,
            n_bits=26,
            is_shared=False
        )

        self._feedback_enable_register = MuxedRegister(
            gpio_write_address=self._gpio_write_address,
            gpio_read_address=self._gpio_read_address,
            register_address=5,
            n_bits=1,
            is_shared=False
        )

        self._feedback_toggle_delay_register = MuxedRegister(
            gpio_write_address=self._gpio_write_address,
            gpio_read_address=self._gpio_read_address,
            register_address=6,
            n_bits=26,
            is_shared=False
        )

        self._feedback_toggle_time_register = MuxedRegister(
            gpio_write_address=self._gpio_write_address,
            gpio_read_address=self._gpio_read_address,
            register_address=7,
            n_bits=26,
            is_shared=False
        )

        self._feedback_gain_register = MuxedRegister(
            gpio_write_address=self._gpio_write_address,
            gpio_read_address=self._gpio_read_address,
            register_address=8,
            n_bits=17,
            is_shared=False
        )

    def _define_controls(self):
        '''
        A method that defines all controls of an aom block
        Called in __init__, but separated out for readability
        '''
        self.input_select_names = {0: 'In 0', 1: 'In 1'}
        self._input_select_control = RedPitayaControl(
            red_pitaya=self.rp,
            register=self._input_select_register,
            name='Input select',
            dtype=DataType.UNSIGNED_INT,
            in_range=lambda val: (0 <= val <= 1),
        )

        self._trap_enable_control = RedPitayaControl(
            red_pitaya=self.rp,
            register=self._trap_enable_register,
            name='Trap enable',
            dtype=DataType.BOOL,
        )

        self._trap_toggle_delay_control = RedPitayaControl(
            red_pitaya=self.rp,
            register=self._trap_toggle_delay_register,
            name='Trap toggle delay',
            dtype=DataType.UNSIGNED_INT,
            in_range=lambda val: (0 <= val <= 0.5368709),
            write_data=lambda val: int(val * self.fs),
            read_data=lambda reg: reg / self.fs,
        )

        self._trap_toggle_time_control = RedPitayaControl(
            red_pitaya=self.rp,
            register=self._trap_toggle_time_register,
            name='Trap toggle time',
            dtype=DataType.UNSIGNED_INT,
            in_range=lambda val: (0 <= val <= 0.5368709),
            write_data=lambda val: int(val * self.fs),
            read_data=lambda reg: reg / self.fs,
        )

        self._feedback_enable_control = RedPitayaControl(
            red_pitaya=self.rp,
            register=self._feedback_enable_register,
            name='Feedback enable',
            dtype=DataType.BOOL,
        )

        self._feedback_toggle_delay_control = RedPitayaControl(
            red_pitaya=self.rp,
            register=self._feedback_toggle_delay_register,
            name='Feedback toggle delay',
            dtype=DataType.UNSIGNED_INT,
            in_range=lambda val: (0 <= val <= 0.5368709),
            write_data=lambda val: int(val * self.fs),
            read_data=lambda reg: reg / self.fs,
        )

        self._feedback_toggle_time_control = RedPitayaControl(
            red_pitaya=self.rp,
            register=self._feedback_toggle_time_register,
            name='Feedback toggle time',
            dtype=DataType.UNSIGNED_INT,
            in_range=lambda val: (0 <= val <= 0.5368709),
            write_data=lambda val: int(val * self.fs),
            read_data=lambda reg: reg / self.fs,
        )

        self._feedback_gain_control = RedPitayaControl(
            red_pitaya=self.rp,
            register=self._feedback_gain_register,
            name='Feedback gain',
            dtype=DataType.UNSIGNED_INT,
            in_range=lambda val: (0 <= val <= 1),
            write_data=lambda val: int(val * 2 ** self._feedback_gain_register.n_bits - 1e-9),
            read_data=lambda reg: reg / 2 ** self._feedback_gain_register.n_bits,
        )

        # red_pitaya: Union[RedPitaya, str],
        # register: Union[Register, MuxedRegister],
        # name: str,
        # dtype: utils.DataType = utils.DataType.UNSIGNED_INT,
        # in_range: Callable = None,
        # write_data: Callable = None,
        # read_data: Callable = None,
        # default_value: Any = None,
        # apply_default: bool = False)

    def __str__(self):
        return ("AOM Control:\n"
                "  Trap is {trap_enable}\n"
                "    Trap toggle: {trap_toggle_time}us (delay {trap_delay_time}us)\n"
                "  Feedback is {feedback_enable}, Input: {in_sel_name}, ({in_sel_no}), Gain: {feedback_gain:.3f}\n"
                "    Feedback toggle: {feedback_toggle_time}us (delay {feedback_delay_time}us)").format(
            in_sel_name=self.input_select_names[self._input_select_control.value],
            in_sel_no=self._input_select_control.value,
            trap_enable='ON' if self._trap_enable_control.value else 'OFF',
            trap_toggle_time=self._trap_toggle_time_control.value*1e6,
            trap_delay_time=self._trap_toggle_delay_control.value*1e6,
            feedback_enable='ON' if self._feedback_enable_control.value else 'OFF',
            feedback_toggle_time=self._feedback_toggle_time_control.value*1e6,
            feedback_delay_time=self._feedback_toggle_delay_control.value*1e6,
            feedback_gain=self._feedback_gain_control.value,
        )

    def __repr__(self):
        return self.__str__()
